name: Release handling

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-release:
    name: "Build release"
    runs-on: windows-latest
    steps:
      - name: get ver from ref_name
        id: get-ver
        run: |
          if (("${{github.ref_name}}" -match 'v?(\d+\.\d+\.\d+)') -eq $false) { Write-Host "::error::github.ref_name not in valid format. Expected '0.0.0' or 'v0.0.0' but got '${{github.ref_name}}'." -fore RED; exit 1; }
          $ver = $Matches[1]
          echo "VER=$ver" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "ver=$ver" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: powershell

      - run: echo "${{steps.get-ver.outputs.ver}}"
        shell: powershell

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release -p:Version=${{steps.get-ver.outputs.ver}} -p:PackageVersion=${{steps.get-ver.outputs.ver}} -p:RepositoryCommit=${{ github.sha }} -p:RepositoryBranch=${{ github.ref_name }}

      - name: Test
        run: dotnet test --no-build --verbosity normal --configuration Release

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          retention-days: 1
          name: build_release_${{ github.sha }}
          path: |
            out/*
            README.md
            LICENSE
          if-no-files-found: error

  generate-release:
    name: "Generate release"
    needs: build-release
    runs-on: "ubuntu-latest"

    steps:
      - name: Setup Nuget
        uses: nuget/setup-nuget@v1
        with:
          #nuget-api-key: ${{ secrets.NuGetAPIKey }}
          nuget-version: 'latest'

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build_release_${{ github.sha }}

      - name: Create release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            out/*.nupkg
            README.md
            LICENSE
